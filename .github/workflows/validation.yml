# .github/workflows/validation.yml
name: GitHub PR Validations

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout PR
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Node
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3Ô∏è‚É£ Install dependencies (safe: npm install si no hay package-lock.json)
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "No package-lock.json, usando npm install"
            npm install
          fi

      # 4Ô∏è‚É£ Validate branch name
      - name: Validate branch name
        id: branch-check
        run: |
          BRANCH_NAME=${{ github.head_ref }}
          if [[ "$BRANCH_NAME" == "develop" || "$BRANCH_NAME" == "main" ]]; then
            echo "Branch principal, no se valida"
            echo "branch_status=ok" >> $GITHUB_OUTPUT
            exit 0
          fi

          PATTERN="^(feature|fix|chore|docs|refactor|test|style|perf)/(frontend|backend)/[A-Z]+-[0-9]+-[a-z0-9-]+$"
          if [[ ! "$BRANCH_NAME" =~ $PATTERN ]]; then
            ERROR_MSG="‚ùå Branch inv√°lido: $BRANCH_NAME\nüí° Formato esperado: <tipo>/<stack>/<TICKET>-<descripci√≥n>\nüí° Ejemplo: feature/frontend/NOM-4-login-form\nüí° Regex usada: $PATTERN"
            echo "branch_status=fail" >> $GITHUB_OUTPUT
            echo "branch_error<<EOF" >> $GITHUB_OUTPUT
            echo -e "$ERROR_MSG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "branch_status=ok" >> $GITHUB_OUTPUT
          fi

      # 5Ô∏è‚É£ Validate commit messages
      - name: Validate commits
        id: commit-check
        run: |
          COMMITS=$(git log origin/${{ github.base_ref }}..HEAD --pretty=format:%s)
          ERRORS=""
          for COMMIT in $COMMITS; do
            echo "$COMMIT" | npx --no-install commitlint --edit /dev/stdin || {
              ERRORS+="‚ùå Commit inv√°lido: $COMMIT\n"
              ERRORS+="üí° Formato esperado: <tipo>(<ticket>): <descripci√≥n>\n"
            }
          done
          if [[ -n "$ERRORS" ]]; then
            echo "commit_status=fail" >> $GITHUB_OUTPUT
            echo "commit_error<<EOF" >> $GITHUB_OUTPUT
            echo -e "$ERRORS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "commit_status=ok" >> $GITHUB_OUTPUT
          fi

      # 6Ô∏è‚É£ Check secrets
      - name: Check for secrets
        id: secret-check
        run: |
          SECRETS=$(grep -RInE "API_KEY|SECRET_KEY|SECRET|\.env" . || true)
          if [[ -n "$SECRETS" ]]; then
            echo "secret_status=fail" >> $GITHUB_OUTPUT
            echo "secret_error<<EOF" >> $GITHUB_OUTPUT
            echo -e "‚ùå Se detectaron posibles secretos:\n$SECRETS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "secret_status=ok" >> $GITHUB_OUTPUT
          fi

      # 7Ô∏è‚É£ Comment on PR if any validation fails
      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchStatus = `${{ steps.branch-check.outputs.branch_status || '' }}`
            const branchError = `${{ steps.branch-check.outputs.branch_error || '' }}`
            const commitStatus = `${{ steps.commit-check.outputs.commit_status || '' }}`
            const commitError = `${{ steps.commit-check.outputs.commit_error || '' }}`
            const secretStatus = `${{ steps.secret-check.outputs.secret_status || '' }}`
            const secretError = `${{ steps.secret-check.outputs.secret_error || '' }}`

            let commentBody = ""
            if(branchStatus === "fail") commentBody += branchError.trim() + "\n\n"
            if(commitStatus === "fail") commentBody += commitError.trim() + "\n\n"
            if(secretStatus === "fail") commentBody += secretError.trim() + "\n\n"

            if(commentBody.length > 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              })
            }

